// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  followers User[]    @relation(name: "FollowRelation", references: [id])
  following User[]    @relation(name: "FollowRelation", references: [id])
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  photos    Photo[]
  likes     Like[]
  comments  Comment[]
}

model Photo {
  id       Int       @id @default(autoincrement())
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  // 실제로 데이터 베이스에 저장되는 것은 userId
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  file     String
  caption  String?
  hashtags Hashtag[]
  likes    Like[]
  comments Comment[]
}

model Hashtag {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  hashtag  String   @unique
  photos   Photo[]
}

model Like {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  photo    Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoId  Int
  userId   Int

  @@unique([photoId, userId])
}

model Comment {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  photo    Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId  Int
  payload  String
}
